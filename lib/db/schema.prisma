datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio          String?
  
  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  comments      Comment[]
  playlists     Playlist[]
  subscriptions Subscription[] @relation("Subscriber")
  subscribers   Subscription[] @relation("Creator")
  likes         Like[]
  history       WatchHistory[]
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  thumbnail   String?
  duration    Int
  views       Int      @default(0)
  isShort     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  comments    Comment[]
  likes       Like[]
  playlists   PlaylistVideo[]
  history     WatchHistory[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Subscription {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  
  subscriberId String
  subscriber   User     @relation("Subscriber", fields: [subscriberId], references: [id])
  creatorId    String
  creator      User     @relation("Creator", fields: [creatorId], references: [id])

  @@unique([subscriberId, creatorId])
}

model Playlist {
  id          String   @id @default(cuid())
  title       String
  description String?
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  videos      PlaylistVideo[]
}

model PlaylistVideo {
  id         String   @id @default(cuid())
  position   Int
  addedAt    DateTime @default(now())
  
  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  isLike    Boolean  // true for like, false for dislike
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}

model WatchHistory {
  id        String   @id @default(cuid())
  watchedAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

